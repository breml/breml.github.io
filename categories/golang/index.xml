<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on breml's blog</title><link>https://breml.github.io/categories/golang/</link><description>Recent content in golang on breml's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Dec 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://breml.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Using MongoDB Backend Service with Go App in the Swisscom App Cloud</title><link>https://breml.github.io/blog/2015/12/22/using-mongodb-backend-service-with-go-app-in-the-swisscom-app-cloud/</link><pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2015/12/22/using-mongodb-backend-service-with-go-app-in-the-swisscom-app-cloud/</guid><description>Introduction In my last post I described how to create and deploy an app, written with the Google Go language, to the Swisscom Application Cloud. This post is a follow up, in which I would like to share some of the learnings, I discovered while extending the Hello World app, following the ideas for the node.js example.
This blog post is not a detailed step by step tutorial, but rather points out the in my opinion important steps to understand how to get a Go app running in the App Cloud with a MongoDB backend.</description></item><item><title>Deploy a Go Web App to the Swisscom Application Cloud</title><link>https://breml.github.io/blog/2015/12/17/deploy-a-go-web-app-to-the-swisscom-application-cloud/</link><pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2015/12/17/deploy-a-go-web-app-to-the-swisscom-application-cloud/</guid><description>Inspired by the this blog post about the deployment of a node.js example app to the Swisscom Application Cloud, I decided to test the Swisscom Application Cloud my self with a similar app, written in Google Go language.
This blog should take you through the essential steps on a Linux based system to push your own Go based app to a Cloud Foundry based app cloud, for example the one from Swisscom.</description></item><item><title>Dividable without remainder</title><link>https://breml.github.io/blog/2015/10/22/dividable-without-remainder/</link><pubDate>Thu, 22 Oct 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2015/10/22/dividable-without-remainder/</guid><description>Summary Problem For a &amp;ldquo;1 in n sampling&amp;rdquo; problem I was looking for a fast way to determine, if a value x (random number) is dividable by a previously known divisor d (sampling rate) without remainder. So the algorithm has to result with true in 1 of d cases, otherwise with false. x and d are both unsigned integers, in my case 32 bit long. Since the algorithm will be used for sampling and x is produced by a random number generator (see below: Motivation), a slight inaccuracy (&amp;lt; 0.</description></item><item><title>gogitignore</title><link>https://breml.github.io/blog/2015/10/06/gogitignore/</link><pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2015/10/06/gogitignore/</guid><description>The other day I extended one of my go (golang) project with some new main packages resulting in new commands. After building the project with go build the resulting executables are placed in the respective directories within the project. While updating the git repository I found it cumbersome to add all the new executables to the .gitignore-file. On linux there is unfortunately now easy way to exclude all executables within a project with a single line in .</description></item></channel></rss>