<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>breml's blog</title><link>https://breml.github.io/</link><description>Recent content on breml's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://breml.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Embed CA Root Certificates in Go Programs</title><link>https://breml.github.io/blog/2021/01/17/embed-ca-root-certificates-in-go-programs/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2021/01/17/embed-ca-root-certificates-in-go-programs/</guid><description>Abstract Package rootcerts provides an embedded copy of the Mozilla Included CA Certificate List, more specifically the PEM of Root Certificates in Mozilla&amp;amp;rsquo;s Root Store with the Websites (TLS/SSL) Trust Bit Enabled. If this package is imported anywhere in the program and the crypto/x509 package cannot find the system certificate pool, it will use the embedded certificates instead.
Background In my professional work as well as in my private projects I often deploy Go programs as containers.</description></item><item><title>About</title><link>https://breml.github.io/about/</link><pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate><guid>https://breml.github.io/about/</guid><description>Who I am My name is Lucas Bremgartner. In cyberspace I mostly use my nick name breml. I life with my wife and two childern in Switzerland. I have a batchelor degree in information technology and a master of applied science degree in information security and I have more than 20 years experience in IT.
But IT is not everything. One of the most important things about me is ♥ ❌ ✝ ?</description></item><item><title>Comment Elasticsearch Mapping</title><link>https://breml.github.io/blog/2016/09/12/comment-elasticsearch-mapping/</link><pubDate>Mon, 12 Sep 2016 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2016/09/12/comment-elasticsearch-mapping/</guid><description>If you have worked with large Elasticsearch mappings you may also have encountered the problem, that there is no possibility to comment your mapping or indexing template. Unfortunately the Elasticsearch mappings as well as the indexing templates are defined in JSON, which does not allow to add comments.
I thought the same, until I stumbled over Elasticsearch issue 1394 and the linked commit from January 2013, where a single line was added to the the configuration of the JSON factory:</description></item><item><title>Using MongoDB Backend Service with Go App in the Swisscom App Cloud</title><link>https://breml.github.io/blog/2015/12/22/using-mongodb-backend-service-with-go-app-in-the-swisscom-app-cloud/</link><pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2015/12/22/using-mongodb-backend-service-with-go-app-in-the-swisscom-app-cloud/</guid><description>Introduction In my last post I described how to create and deploy an app, written with the Google Go language, to the Swisscom Application Cloud. This post is a follow up, in which I would like to share some of the learnings, I discovered while extending the Hello World app, following the ideas for the node.js example.
This blog post is not a detailed step by step tutorial, but rather points out the in my opinion important steps to understand how to get a Go app running in the App Cloud with a MongoDB backend.</description></item><item><title>Deploy a Go Web App to the Swisscom Application Cloud</title><link>https://breml.github.io/blog/2015/12/17/deploy-a-go-web-app-to-the-swisscom-application-cloud/</link><pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2015/12/17/deploy-a-go-web-app-to-the-swisscom-application-cloud/</guid><description>Inspired by the this blog post about the deployment of a node.js example app to the Swisscom Application Cloud, I decided to test the Swisscom Application Cloud my self with a similar app, written in Google Go language.
This blog should take you through the essential steps on a Linux based system to push your own Go based app to a Cloud Foundry based app cloud, for example the one from Swisscom.</description></item><item><title>Tagging of dynamically added Fields in Elasticsearch</title><link>https://breml.github.io/blog/2015/10/28/tagging-of-dynamically-added-fields-in-elasticsearch/</link><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2015/10/28/tagging-of-dynamically-added-fields-in-elasticsearch/</guid><description>At work we use the ELK Stack (Elasticsearch, Logstash and Kibana) to process, store and visualize all kind of log data. To get the most out of the information stored in Elasticsearch, we maintain a handcrafted Elasticsearch mapping.
As we are in the process of continuously adding more and more log sources, now and then our Elasticsearch mapping is not complete. In this case the dynamic mapping feature of Elasticsearch adds these new fields by it&amp;rsquo;s own.</description></item><item><title>Dividable without remainder</title><link>https://breml.github.io/blog/2015/10/22/dividable-without-remainder/</link><pubDate>Thu, 22 Oct 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2015/10/22/dividable-without-remainder/</guid><description>Summary Problem For a &amp;ldquo;1 in n sampling&amp;rdquo; problem I was looking for a fast way to determine, if a value x (random number) is dividable by a previously known divisor d (sampling rate) without remainder. So the algorithm has to result with true in 1 of d cases, otherwise with false. x and d are both unsigned integers, in my case 32 bit long. Since the algorithm will be used for sampling and x is produced by a random number generator (see below: Motivation), a slight inaccuracy (&amp;lt; 0.</description></item><item><title>gogitignore</title><link>https://breml.github.io/blog/2015/10/06/gogitignore/</link><pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/blog/2015/10/06/gogitignore/</guid><description>The other day I extended one of my go (golang) project with some new main packages resulting in new commands. After building the project with go build the resulting executables are placed in the respective directories within the project. While updating the git repository I found it cumbersome to add all the new executables to the .gitignore-file. On linux there is unfortunately now easy way to exclude all executables within a project with a single line in .</description></item><item><title>License</title><link>https://breml.github.io/license/</link><pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate><guid>https://breml.github.io/license/</guid><description>The content of this website / blog is unless otherwise stated licensed under a Creative Commons Attribution 4.0 International License &amp;lt;img src=&amp;#34;https://i.creativecommons.org/l/by/4.0/80x15.png&amp;#34; alt=&amp;#34;Creative Commons Attribution 4.0 International License&amp;#34;&amp;gt;
Used components Powered by: Hugo: Simple Public License (SimPL) 2.0
Template based on: Hyde-X: MIT License
Source code highlighting: highlightjs: License
Emoji icons from: emoji-cheet-sheet.com: License</description></item><item><title/><link>https://breml.github.io/drafts/about_new/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://breml.github.io/drafts/about_new/</guid><description>https://www.slideshare.net/breml/elastic-stack-swisscom-application-cloud https://www.youtube.com/watch?v=REsBjdhUbWo
Update About in Blog
Update Linkedin &amp;amp; Xing Profiles
Add Blog Post about Logstash Config Parser
And so on…</description></item><item><title/><link>https://breml.github.io/drafts/blog-post-shave-of-tls-hand-shake-from-lambda-execution-time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://breml.github.io/drafts/blog-post-shave-of-tls-hand-shake-from-lambda-execution-time/</guid><description>Blog Post: Shave of TLS hand shake from Lambda execution time For connections to relational databases it is common to have some sort of connect command, which is used during program initialization (e.g connection pool) But what is the equivalent for modern, rest API based services? Does it also work with Slack connection?</description></item><item><title/><link>https://breml.github.io/drafts/peg-in-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://breml.github.io/drafts/peg-in-go/</guid><description>PEG in Go Error Handling Error Branch with / Return Error Panic if not recoverable
Steht der Error Stack zu verfügung im Parser? Können Fehler zurückgesetzt werden?
Customized Errors zurück geben: Missing Keyword/Keyword expected error, Keyword in Field Missing closing xy (&amp;quot;, ), usw.) Expected Blockstart Element, usw.
Wie sind die lesbaren Rulenames nutzbar?</description></item><item><title>Blogs</title><link>https://breml.github.io/links/blogs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://breml.github.io/links/blogs/</guid><description> catonmat.net
Online tools for lot of different data formats like JSON, CSV
One liners for awk, sed, perl, bash, etc. Peter Bourgon Dave Cheney Mathias Lafeldt</description></item><item><title>Go Programming Language</title><link>https://breml.github.io/links/golang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://breml.github.io/links/golang/</guid><description>General Official Site of the Go Programming Language Go Standard Library Package Documentation Effective Go The Go Programming Language Specification Go Playground Go Dev Find Packages Discover Go Packages (pkg.go.dev) Awesome Go News Golang Weekly Gotime Gems from Go practitioners Practical Go, Dave Cheney Style guideline for Go packages, Jaana Dogan Go at Google: Language Design in the Service of Software Engineering, Rob Pike Style Guides bahlo Go Styleguide Cockroach Go coding guidelines Gitlab Go standards and style guidelines Go Code Review Comments Hyperledger Coding guidelines magnetico Design Specification Go Programming Guidelines Sourcegraph Go style guide Uber Go Style Guide UK Government Digital Service Go style guide Thanos Coding Style Guide Know-how 50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs String Matching Linking golang statically Go Slices Go by Example Coverage gocovmerge go-coverage-with-external-tests Courtney - meaningful test coverage Bincover - measure code coverage from a binary Online Tools The Go Playground Play with Go Rego - A Go regular expression tester GoDate.</description></item><item><title>Links</title><link>https://breml.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://breml.github.io/links/</guid><description/></item><item><title>Shell and Scripting</title><link>https://breml.github.io/links/shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://breml.github.io/links/shell/</guid><description>General Command Line Interface Guidelines Bash scripting quirks &amp;amp;amp; safety tips - Julia Evans Bash Minimal safe Bash script template Github gist of script template Fish Shell Fish Shell Linting ShellCheck</description></item><item><title>Tools</title><link>https://breml.github.io/links/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://breml.github.io/links/tools/</guid><description>Cheat Sheets Bash - Working Productively in Bash&amp;amp;rsquo;s Vi Command Line Editing Mode (with Cheat Sheet) Readline VI Editing Mode Cheat Sheet - Default Keyboard Shortcuts for Bash Bash History - The Definitive Guide to Bash Command Line History Bash History Cheat Sheet Git Cheat Sheet (Github) Github flavoured Markdown Github flavoured Markdown Syntax Markdown Syntax-Übersicht Markdown Cheatsheet (in Markdown) Slack tmux vi / vim graphical cheat sheet vim VIM Cheat Sheet for Programmers vim visual cheat sheet Vimperator cheat sheet Visual Studio Code - Keyboard Shortcuts Reference Visual Studio Code - Keyboard Shortcuts Reference for Linux Colaboration tmate - Instant terminal sharing Documentation Asciiflow - draw ascii graphics Mermaid - represent diagrams using text and code Live Editor Online Tools Debuggex - Visual Regular Expression Debugger regular expressions 101 dillinger.</description></item></channel></rss>