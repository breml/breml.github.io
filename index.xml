<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>breml&#39;s blog</title>
    <link>https://breml.github.io/</link>
    <description>Recent content on breml&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://breml.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>https://breml.github.io/about/</link>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://breml.github.io/about/</guid>
      <description>

&lt;h2 id=&#34;who-i-am:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Who I am&lt;/h2&gt;

&lt;p&gt;My name is Lucas Bremgartner. In cyberspace I mostly use my nick name &lt;strong&gt;breml&lt;/strong&gt;. I life with my wife and two childern in Switzerland. I have a batchelor degree in information technology and a master of applied science degree in information security. I have more than 20 years experience in IT.&lt;/p&gt;

&lt;h2 id=&#34;what-i-do:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;What I do&lt;/h2&gt;

&lt;p&gt;I currently work as an software architect for a swiss sofware company focusing on security solutions, mainly in the fields of networks and web applications. My day to day work includes designing and planing of software products and it solutions as well as DevOps like activities. This includes solutions based on &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;, &lt;a href=&#34;https://www.elastic.co/products/logstash&#34;&gt;Logstash&lt;/a&gt;, &lt;a href=&#34;https://graphite.readthedocs.org/&#34;&gt;Graphite&lt;/a&gt; and &lt;a href=&#34;https://puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt;. Unfortunately a lot of the glue code, we use to put these pieces together, is closed source.&lt;/p&gt;

&lt;h2 id=&#34;open-source:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Open Source&lt;/h2&gt;

&lt;p&gt;My story with open source software starts during my education, when I did my first steps with &lt;a href=&#34;https://www.kernel.org/&#34;&gt;Linux&lt;/a&gt;, &lt;a href=&#34;https://www.php.net&#34;&gt;PHP&lt;/a&gt; and &lt;a href=&#34;https://www.mysql.com&#34;&gt;MySQL&lt;/a&gt;. My first open source contribution dates back in 1999 where I helped with a small fix to the solaris build of &lt;a href=&#34;http://www.modssl.org/about/credits.html&#34;&gt;mod_ssl&lt;/a&gt;. Ever since I contributed to several open source projects in multiple programming languages like golang, java, php, python and ruby.&lt;/p&gt;

&lt;p&gt;Actually &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; is my first choice. I realy love the strong typing, fast compile times, static binaries, concurrency, go gettable libraries and the mascot gopher 
&lt;img class=&#34;emoji smiley&#34; src=&#34;https://breml.github.io/img/emoji-cheat-sheet.com/public/graphics/emojis/smiley.png&#34; /&gt;

.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://breml.github.io/license/</link>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://breml.github.io/license/</guid>
      <description>

&lt;p&gt;The content of this website / blog is unless otherwise stated licensed under a &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;
&lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;&lt;img src=&#34;https://i.creativecommons.org/l/by/4.0/80x15.png&#34; alt=&#34;Creative Commons Attribution 4.0 International License&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;used-components:53e892b8b41cc4caece1cfd5ef21d6e7&#34;&gt;Used components:&lt;/h2&gt;

&lt;p&gt;Powered by: &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/spf13/hugo/master/LICENSE.md&#34;&gt;Simple Public License (SimPL) 2.0 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Template based on: &lt;a href=&#34;https://github.com/zyro/hyde-x&#34;&gt;Hyde-X&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/zyro/hyde-x/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source code highlighting: &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlightjs&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/isagalaev/highlight.js/master/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Emoji icons from: &lt;a href=&#34;http://www.emoji-cheat-sheet.com/&#34;&gt;emoji-cheet-sheet.com&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/arvida/emoji-cheat-sheet.com/master/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gogitignore</title>
      <link>https://breml.github.io/blog/2015/10/06/gogitignore/</link>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://breml.github.io/blog/2015/10/06/gogitignore/</guid>
      <description>

&lt;p&gt;The other day I extended one of my go (golang) project with some new main packages resulting in new commands. After building the project with &lt;code&gt;go build&lt;/code&gt; the resulting executables are placed in the respective directories within the project. While updating the git repository I found it combersome to add all the new executables to the .gitignore-file. On linux there is unfortunately now easy way to exclude all executables within a project with a single line in .gitignore.&lt;/p&gt;

&lt;p&gt;With go it is easily predictable how the resulting executables from a main package are named. The directory name, containing a main package, will be used as filename for the new command. Hence I hacked some lines of go code to automaticaly update the .gitignore file. The result is the &lt;a href=&#34;https://github.com/breml/gogitignore&#34;&gt;gogitignore&lt;/a&gt;. At the moment it still a bit rough around the edges, but the main idea is allready implemented.&lt;/p&gt;

&lt;h2 id=&#34;usage:82ed5a67ff3dec1227a0a5d6b8aae203&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;In the easiest case you may just run &lt;code&gt;gogitignore&lt;/code&gt; in the root directory of your go project. This will add all executables, build from the main packages, automatically as an entry to the .gitignore file in the project root directory. To doublecheck the result gogitignore provides the flag -stdout (or -dryrun).&lt;/p&gt;

&lt;p&gt;For more information about the usage run &lt;code&gt;gogitignore -h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-dir=&amp;quot;.&amp;quot;: destination directory where .gitignore is located and where to traverse directory tree for go programs.
-dryrun=false: dryrun, no changes are made
-exec=false: find all files with executable bit set
-gomain=true: add executables, resulting from building go main packages
-h=false: print usage
-help=false: print usage
-inplace=false: edit .gitignore in place
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>